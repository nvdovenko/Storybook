import{r as p,R as x}from"./index-9yPe82QC.js";const D=(r,s)=>{let a,t,n;const o=r.match(/^rgba?\((\d+), (\d+), (\d+)(?:, (\d+\.?\d*))?\)$/);if(o)a=parseInt(o[1]),t=parseInt(o[2]),n=parseInt(o[3]);else return r;return a=Math.min(255,Math.floor(a+(255-a)*s)),t=Math.min(255,Math.floor(t+(255-t)*s)),n=Math.min(255,Math.floor(n+(255-n)*s)),`rgb(${a}, ${t}, ${n})`},h=({value:r,maxValue:s,text:a="",backgroundColorWidth:t=20,lineWidth:n=20,gaugeColor:o="rgba(62, 152, 199, 1)",canvasSize:A=300})=>{const T=p.useRef(null),f=Math.max(A,15);return p.useEffect(()=>{const l=T.current;if(l){l.width=f,l.height=f;const e=l.getContext("2d");if(e){const i=l.width/2,u=l.height/2,S=Math.min(i,u)-Math.min(t/2,Math.min(i,u)/2),v=Math.PI*1.5,_=D(o,.5);($=>{const P=v+$/s*2*Math.PI;e.clearRect(0,0,l.width,l.height),e.beginPath(),e.arc(i,u,S,0,Math.PI*2),e.lineWidth=t,e.strokeStyle="#d6d6d6",e.stroke();const b=e.createConicGradient(v,i,u);b.addColorStop(0,_),b.addColorStop(1,o),e.beginPath(),e.arc(i,u,S,v,P),e.lineWidth=n,e.strokeStyle=b,e.stroke(),e.font="14px Nunito Sans",e.fillStyle="#000",e.textAlign="center",e.textBaseline="middle",e.fillText(a,i,u)})(r)}}},[r,s,a,t,n,o,f]),x.createElement("canvas",{ref:T})};h.__docgenInfo={description:"",methods:[],displayName:"RadialGauge",props:{value:{required:!0,tsType:{name:"number"},description:""},maxValue:{required:!0,tsType:{name:"number"},description:""},text:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:"''",computed:!1}},backgroundColorWidth:{required:!1,tsType:{name:"number"},description:"",defaultValue:{value:"20",computed:!1}},lineWidth:{required:!1,tsType:{name:"number"},description:"",defaultValue:{value:"20",computed:!1}},gaugeColor:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:"'rgba(62, 152, 199, 1)'",computed:!1}},canvasSize:{required:!1,tsType:{name:"number"},description:"",defaultValue:{value:"300",computed:!1}}}};const B={title:"Components/Data visualisation/Radial gauge",component:h,tags:["autodocs"],argTypes:{value:{control:"number",description:"The current value of the gauge. This is the percentage to be displayed on the radial gauge (0 to maxValue)."},maxValue:{control:"number",description:"The maximum value of the gauge. The gauge will fill up as the `value` approaches this number."},text:{control:"text",description:"The text to be displayed in the center of the gauge. Often used for the value or a label."},backgroundColorWidth:{control:"number",description:"The width of the background circle that forms the gauge, in pixels."},lineWidth:{control:"number",description:"The width of the gauge line, in pixels. This determines the thickness of the radial arc."},gaugeColor:{control:"color",description:"The color of the gauge line, representing the current value. Any valid CSS color value can be used."},canvasSize:{control:"number",description:"The size of the canvas in pixels. This defines the overall size of the radial gauge."}}},V=r=>x.createElement(h,{...r}),c=V.bind({});c.args={value:75,maxValue:100,text:"75%",backgroundColorWidth:20,lineWidth:20,gaugeColor:"rgba(62, 152, 199, 1)",canvasSize:300};const d=V.bind({});d.args={value:63,maxValue:100,text:"63%",backgroundColorWidth:30,lineWidth:30,gaugeColor:"rgb(90, 136, 86)",canvasSize:150};const m=V.bind({});m.args={value:0,maxValue:100,text:"0%",backgroundColorWidth:20,lineWidth:20,gaugeColor:"rgba(62, 152, 199, 1)",canvasSize:200};const g=()=>{const[r,s]=p.useState(50),a=100;return p.useEffect(()=>{const t=setInterval(()=>{s(n=>(n+10)%(a+10))},1e3);return()=>clearInterval(t)},[a]),x.createElement(h,{value:r,maxValue:a,text:`${r}%`})};g.__docgenInfo={description:"",methods:[],displayName:"Animated"};var y,C,M;c.parameters={...c.parameters,docs:{...(y=c.parameters)==null?void 0:y.docs,source:{originalSource:"args => <RadialGauge {...args} />",...(M=(C=c.parameters)==null?void 0:C.docs)==null?void 0:M.source}}};var R,G,I;d.parameters={...d.parameters,docs:{...(R=d.parameters)==null?void 0:R.docs,source:{originalSource:"args => <RadialGauge {...args} />",...(I=(G=d.parameters)==null?void 0:G.docs)==null?void 0:I.source}}};var E,k,W;m.parameters={...m.parameters,docs:{...(E=m.parameters)==null?void 0:E.docs,source:{originalSource:"args => <RadialGauge {...args} />",...(W=(k=m.parameters)==null?void 0:k.docs)==null?void 0:W.source}}};var w,z,q;g.parameters={...g.parameters,docs:{...(w=g.parameters)==null?void 0:w.docs,source:{originalSource:`() => {
  const [value, setValue] = useState(50);
  const maxValue = 100;
  useEffect(() => {
    const interval = setInterval(() => {
      setValue(prevValue => (prevValue + 10) % (maxValue + 10));
    }, 1000);
    return () => clearInterval(interval);
  }, [maxValue]);
  return <RadialGauge value={value} maxValue={maxValue} text={\`\${value}%\`} />;
}`,...(q=(z=g.parameters)==null?void 0:z.docs)==null?void 0:q.source}}};const X=["Default","CustomValue","EmptyGauge","Animated"];export{g as Animated,d as CustomValue,c as Default,m as EmptyGauge,X as __namedExportsOrder,B as default};
